__init__.py:
# src/__init__.py

# Imports for external use
from .data_loader import load_data, preprocess_data
from .utilities import remove_outliers
from .analysis import calculate_mean_concentration_by_year
from .visualization import plot_mean_concentration_by_year, plot_spatial_distribution

# Configuration settings (if any)
import logging

# Setup basic configuration for logging across the entire package
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Possible package-wide configurations or constants
DATA_PATH = './data/water_quality.csv'
OUTPUT_PATH = './figures'

# Init function to initialize any necessary settings or parameters
def init_package():
    """
    Initialize the package configuration and logging settings.
    This can include setting up logging levels, logging formats,
    or any other package-wide settings.
    """
    logging.info("Package src initialized, ready for data processing.")

# Optionally, execute some package-wide initialization upon import
init_package()




data_loader.py:
import pandas as pd
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_data(filepath):
    """
    Load data from a CSV file and parse the 'date' column as datetime.

    Parameters:
        filepath (str): The path to the CSV file.

    Returns:
        pandas.DataFrame: Dataframe containing the loaded data.
    """
    try:
        data = pd.read_csv(filepath, parse_dates=['date'])
        logging.info("Data loaded successfully from %s", filepath)
        return data
    except Exception as e:
        logging.error("Failed to load data from %s: %s", filepath, e)
        raise

def preprocess_data(data):
    """
    Perform initial preprocessing of the data, such as removing unnecessary columns.

    Parameters:
        data (pandas.DataFrame): The raw data.

    Returns:
        pandas.DataFrame: Dataframe with unnecessary columns removed.
    """
    try:
        if 'uni' in data.columns:
            data.drop('uni', axis=1, inplace=True)
            logging.info("Column 'uni' removed from data")
        return data
    except Exception as e:
        logging.error("Failed to preprocess data: %s", e)
        raise




analysis.py:
import pandas as pd
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def calculate_mean_concentration_by_year(data):
    """
    Calculate the mean NO23 concentration per year.

    Parameters:
        data (pandas.DataFrame): Dataframe containing 'date' and 'NO23' columns.

    Returns:
        pandas.Series: Mean NO23 concentration by year.
    """
    try:
        data['year'] = data['date'].dt.year
        mean_concentration = data.groupby('year')['NO23'].mean()
        logging.info("Mean concentration calculated by year")
        return mean_concentration
    except KeyError:
        logging.error("Necessary columns are missing from the dataframe")
        raise
    except Exception as e:
        logging.error("Error calculating mean concentration by year: %s", e)
        raise




visualization.py:
import matplotlib.pyplot as plt
import logging

# Ensure the logger is configured to handle messages appropriately
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def plot_mean_concentration_by_year(mean_concentration, output_path):
    """
    Plot and save the mean NO23 concentration by year.

    Parameters:
        mean_concentration (pandas.Series): Series containing the mean NO23 concentration by year.
        output_path (str): Path to save the plot.
    """
    try:
        plt.figure(figsize=(10, 6))
        mean_concentration.plot(kind='bar', color='skyblue')
        plt.xlabel('Year')
        plt.ylabel('Mean NO23 Concentration (mg/L)')
        plt.title('Mean Nitrogen Concentration by Year')
        plt.grid(True)
        plt.savefig(f'{output_path}/mean_nitrogen_by_year.png', dpi=300)
        plt.close()
        logging.info("Plot saved to %s/mean_nitrogen_by_year.png", output_path)
    except Exception as e:
        logging.error("Failed to plot mean concentration by year: %s", e)
        raise

def plot_spatial_distribution(data):
    """
    Plot and save the spatial distribution of nitrogen concentration.

    Parameters:
        data (pandas.DataFrame): Dataframe containing 'lon', 'lat', and 'NO23' columns.
    """
    try:
        plt.figure(figsize=(10, 8))
        scatter = plt.scatter(data['lon'], data['lat'], c=data['NO23'], cmap='viridis', alpha=0.7, s=50)
        plt.colorbar(scatter, label='Nitrogen Concentration (mg/L)')
        plt.xlabel('Longitude')
        plt.ylabel('Latitude')
        plt.title('Spatial Distribution of Nitrogen Concentration')
        plt.savefig('./reports/figures/spatial_distribution_nitrogen.png', dpi=300)
        plt.close()
        logging.info("Spatial distribution plot saved to ./reports/figures/spatial_distribution_nitrogen.png")
    except Exception as e:
        logging.error("Failed to plot spatial distribution: %s", e)
        raise




utilities.py:
import numpy as np
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def remove_outliers(data, column):
    """
    Remove outliers based on the IQR method for a specific column.

    Parameters:
        data (pandas.DataFrame): The dataframe from which to remove outliers.
        column (str): The column name for which outliers need to be removed.

    Returns:
        pandas.DataFrame: Dataframe with outliers removed.
    """
    try:
        Q1 = data[column].quantile(0.25)
        Q3 = data[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        filtered_data = data[(data[column] >= lower_bound) & (data[column] <= upper_bound)]
        logging.info("Outliers removed from column '%s'", column)
        return filtered_data
    except KeyError:
        logging.error("Column %s not found in dataframe", column)
        raise
    except Exception as e:
        logging.error("Error removing outliers from column %s: %s", column, e)
        raise




main.py:
import os
import webbrowser
from src.data_loader import load_data, preprocess_data
from src.utilities import remove_outliers
from src.analysis import calculate_mean_concentration_by_year
from src.visualization import plot_mean_concentration_by_year, plot_spatial_distribution
import pandas as pd

def main():
    # Define file paths
    data_path = './data/water_quality.csv'
    output_path = './reports/figures'
    
    # Load and preprocess data
    print("Loading and preprocessing data...")
    data = load_data(data_path)
    data = preprocess_data(data)
    data = remove_outliers(data, 'NO23')
    
    # Perform analysis
    print("Analyzing data...")
    mean_concentration = calculate_mean_concentration_by_year(data)
    
    # Generate visualizations
    print("Generating visualizations...")
    plot_mean_concentration_by_year(mean_concentration, output_path)
    plot_spatial_distribution(data, output_path)
    
    print("All processes completed successfully!")

    # Open the HTML report in the default web browser
    webbrowser.open('file://' + os.path.realpath('./reports/analysis_report.html'))

if __name__ == '__main__':
    main()




Directory structure:
.
├── data
│   └── water_quality.csv
├── main.py
├── merged_contents.sh
├── merged_contents.txt
├── notebooks
│   ├── 01_Data_Preprocessing.ipynb
│   ├── 02_Data_Analysis.ipynb
│   ├── 03_Visualization.ipynb
│   ├── 04_Interactive_Visualizations.ipynb
│   └── old.ipynb
├── README.md
├── reports
│   ├── analysis_report.html
│   ├── analysis_report.md
│   └── figures
│       └── mean_nitrogen_by_year.png
├── requirements.txt
└── src
    ├── analysis.py
    ├── data_loader.py
    ├── __init__.py
    ├── __pycache__
    │   ├── analysis.cpython-312.pyc
    │   ├── data_loader.cpython-312.pyc
    │   ├── __init__.cpython-312.pyc
    │   ├── utilities.cpython-312.pyc
    │   └── visualization.cpython-312.pyc
    ├── utilities.py
    └── visualization.py

7 directories, 24 files
